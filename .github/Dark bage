from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def dark_page():
    return render_template("dark_page.html")

if __name__ == "__main__":
    app.run()
python
# Import necessary libraries
import redis
from redis.sentinel import Sentinel

# Define Redis Sentinel configuration
sentinel = Sentinel([('redis-sentinel', 26379)], socket_timeout=0.1)

# Connect to Redis master instance
master = sentinel.master_for('mymaster', socket_timeout=0.1)

# Connect to Redis slave instances
slaves = [sentinel.slave_for('mymaster', socket_timeout=0.1) for _ in range(3)]

# Implement load balancing by distributing client requests across Redis instances
def get_redis_instance():
    return slaves[random.randint(0, 2)] if random.random() < 0.5 else master

# Use Redis instance to perform operations
redis_instance = get_redis_instance()
redis_instance.set('key', 'value')
python
# Import Redis client library
import redis

# Connect to Redis server
r = redis.Redis(host='localhost', port=6379, db=0)

# Add item as a hash with field-value pairs
r.hset('item:1', 'name', 'apple')
r.hset('item:1', 'color', 'red')
r.hset('item:1', 'price', 0.5)

# Add item to sorted set with score indicating its price
r.zadd('items', {'item:1': 0.5})

# Query items with price between 0.2 and 0.8
items = r.zrangebyscore('items', min=0.2, max=0.8)

# Get properties of each item
for item in items:
    name = r.hget(item, 'name')
    color = r.hget(item, 'color')
    price = r.hget(item, 'price')
    print(f'{name} ({color}): ${price}')
python
# Import necessary libraries
from pymongo import MongoClient
from bson.objectid import ObjectId

# Connect to MongoDB server
client = MongoClient('mongodb://localhost:27017/')

# Access database and collection
db = client['mydatabase']
collection = db['mycollection']

# Enable sharding on the collection
db.adminCommand({'enableSharding': 'mydatabase'})
db.adminCommand({'shardCollection': 'mydatabase.mycollection', 'key': {'_id': 'hashed'}})

# Insert data into the collection
collection.insert_one({'_id': ObjectId(), 'name': 'John', 'age': 30})

# Query data from the collection
result = collection.find_one({'name': 'John'})
print(result)
python
# Import necessary libraries
import redis
from redis.sentinel import Sentinel

# Define Redis Sentinel configuration
sentinel = Sentinel([('redis-sentinel', 26379)], socket_timeout=0.1)

# Connect to Redis master instance
master = sentinel.master_for('mymaster', socket_timeout=0.1)

# Connect to Redis slave instances
slaves = [sentinel.slave_for('mymaster', socket_timeout=0.1) for _ in range(3)]

# Implement load balancing by distributing client requests across Redis instances
def get_redis_instance():
    return slaves[random.randint(0, 2)] if random.random() < 0.5 else master

# Use Redis instance to perform operations
redis_instance = get_redis_instance()
redis_instance.set('key', 'value')